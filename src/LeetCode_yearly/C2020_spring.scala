import java.util.Date
object C2020_spring {
  def minimalSteps(maze: Array[String]): Int = {
    val M = maze.map{str => str.count(_=='M')}.sum
    val O = maze.map{str => str.count(_=='O')}.sum

    val row = maze.length
    val col = maze(0).length
    val Ms = for{i <- 0 until row; j <- 0 until col if maze(i)(j) == 'M'} yield Point(i,j)
    val Os = for{i <- 0 until row; j <- 0 until col if maze(i)(j) == 'O'} yield Point(i,j)
    val S =  for{i <- 0 until row; j <- 0 until col if maze(i)(j) == 'S'} yield Point(i,j)
    val F =  for{i <- 0 until row; j <- 0 until col if maze(i)(j) == 'T'} yield Point(i,j)
    val MS = Ms ++ S
    val OF = Os ++ F
    val idx = scala.collection.mutable.HashMap[Point, Int]()
    MS.indices foreach {i => idx.put(MS(i), i)}
    OF.indices foreach {i => idx.put(OF(i), i)}
    val dist = Array.fill(MS.length, OF.length)(10000000)
    def dfs(src:Int)(q:List[Point], v:Set[Point], found:Set[Point], step:Int):Unit = q match {
      case Nil => {}
      case _ =>
        val nq = q flatMap {p => PointNei.nei4(row, col)(p)} filterNot v.contains filterNot {case Point(i,j) => maze(i)(j) == '#'} distinct
        val nfound = nq filter MS.contains
        nfound foreach {p => dist(idx(p))(src) = step + 1}
        val allfound = (nfound ++ found).toSet
        if(!(nq.isEmpty || allfound.size == MS.length))
          dfs(src)(nq, v ++ nq, allfound, step + 1)
    }

    for{src <- OF.indices} dfs(src)(List(OF(src)), Set(OF(src)), Set.empty[Point], 0)
    val dp = Array.fill(M, 1 << M)(10000000)
    def costCal(i:Int, j:Int):Int = {
      if(i == j) 0 else
      (for{x <- 0 until O} yield dist(i)(x) + dist(j)(x)).min
    }
    val cost = Array.fill(M,M)(0)
    for{i <- 0 until M; j <- 0 until M} cost(i)(j) = costCal(i,j)
    for {i <- 0 until M} dp(i)( 1<< i) = costCal(M, i)
    for {
      state <- 0 until 1 << M
      i <- 0 until M
      if (state & (1 << i)) !=0
      j <- 0 until M
      if i != j
    }
      dp(i)(state) = dp(i)(state) min (dp(j)(state - (1 << i)) + cost(i)(j))
    val res = if(M!=0) (for{i <- 0 until M} yield dp(i)((1 << M) -1) + dist(i)(O)).min else dist(M)(O)
    if (res >= 10000000) -1 else res
  }

  def testLCP13():Unit = {
    val maze = Array("S#O", "M..", "M.T")
    println(minimalSteps(maze))
    val maze2 = Array("S#O", "...", "..T")
    println(minimalSteps(maze2))
    val case48 = Array
    val start_time =new Date().getTime
    println(minimalSteps(case48))
    val end_time =new Date().getTime
    println(end_time-start_time) //单位毫秒
  }
  def main(args: Array[String]): Unit = {
   testLCP13()
  }
}
